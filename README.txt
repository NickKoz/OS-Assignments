Κ22 Λειτουργικά Συστήματα
1η Εργασία
Κοζιός Νικόλαος - 1115201800075


Μεταγλώττιση και τρέξιμο προγράμματος:
	Ο φάκελος της εργασίας περιέχει Makefile για την εύκολη μεταγλώττιση (separate compilation) και εκτέλεση του προγράμματος.
	Ο χρήστης αρκεί να πληκτρολογήσει "make" μέσα στο directory του project ώστε να παραχθούν τα αντικειμενικά αρχεία .o στον φάκελο
"/bin" και το εκτελέσιμο "mngstd" στο main directory του project.
	Για την εκτέλεση του προγράμματος "mngstd", ο χρήστης μπορεί να πληκτρολογήσει "make run ARGS="..." " όπου στις τελείες θα βάλει τις επιλογές αρχείων του 
ή για πιο απλά "./mngstd" ακολουθούμενο με τις διαθέσιμες επιλογές που προσφέρει το πρόγραμμα, δηλαδή με ένα input.txt αρχείο ή με ένα config.txt ή και με τα δύο ή με κανένα.
πχ: ./mngstd -i input.txt -c config.txt ή ./mngstd -c config.txt -i input.txt (τα flags μπορούν να είναι με οποιαδήποτε σειρά, όπως αναφέρεται στην εκφώνηση)


Δομή Εργασίας:
	Η εργασία αποτελείται από τους εξής φακέλους:

	->bin : δεν υπάρχει εξ'αρχής, αλλά δημιουργείται μεταγλωττίζοντας το πρόγραμμα με "make". Περιέχει όλα τα αντικειμενικά (.o) αρχεία.
	->include: περιέχει όλα τα header files που χρειάζεται το πρόγραμμα.
	->modules: περιέχει αρχεία .c που σχετίζονται με οντότητες που χρησιμοποιούνται στο πρόγραμμα.
	->programs: περιέχει αρχεία .c τα οποία αφορούν την λειτουργία του προγράμματος και το interface του με τον χρήστη.


Modules:
	List.c/List.h : πρόκειται για υλοποίηση abstract μονά συνδεδεμένης λίστας. (η πληροφορία κάθε κόμβου λίστας είναι void*)
	HashTable.c/HashTable.h : υλοποίηση abstract πίνακα κατακερματισμού που χρησιμοποιεί το module της λίστας έτσι ώστε να επιτυγχάνουμε separate chaining υλοποίηση.
	InvertedIndex.c/IndertedIndex.h : υλοποίηση δομής τύπου ανεστραμμένου καταλόγου που χρησιμοποιεί επίσης το module της λίστας έτσι ώστε η τελική αναπαράσταση της 
	να είναι μία λίστα της οποίας οι κόμβοι της να περιέχουν ένα κλειδί και μία λίστα από αντικείμενα οποιουδήποτε είδους.(στην συγκεκριμένη περίπτωση Students)
	Σημειώνεται ότι στις συναρτήσεις εισαγωγής, διαγραφής και εύρεσης πληροφορίας μέσω του κλειδιού, πρέπει να δίνουμε το μέγεθος του κλειδιού (int* στο προγραμμα μας) 
	ώστε το κλειδί να δεσμεύεται δυναμικά κάθε φορά που προστίθεται κόμβος με κλειδί και λίστα αφού το κλειδί θέλουμε να υπάρχει όσο η λίστα του έχει ακόμα δεδομένα.
	Student.c/Student.h : η δομή του μαθητή με πεδία που ζητούνται από την εκφώνηση της εργασίας.

Όπως προανέφερα, όλες οι δομές (εκτός από την Student) είναι υλοποιημένες με τέτοιο τρόπο ώστε η πληροφορία που αποθηκεύεται σε αυτές να είναι οτιδήποτε (void*).
Με αυτόν τον τρόπο, οι δομές μπορούν να χρησιμοποιηθούν σε διαφορετικές δομές και να δουλεύουν εξίσου το ίδιο ορθά και χωρίς την επανάληψη του ίδιου κώδικα σε πολλά σημεία.
Για παράδειγμα, η δομή της συνδεδεμένης λίστας που χρησιμοποιείται και στον πίνακα κατακερματισμού αλλά και στον ανεστραμμένο κατάλογο.
Υπάρχουν αρκετά σχόλια στον κώδικα τα οποία επεξηγούν την λειτουργία των δομών αυτών καθώς και την αναπαράστασή τους. 
Όλες οι δομές χρησιμοποιούνται με πλήρως δυναμικό τρόπο. Για παράδειγμα, αν μία χρονιά δεν έχει κανέναν εγγεγραμμένο φοιτητή, τότε δεν υπάρχει κόμβος στον ανεστραμμένο κατάλογο 
για την χρονιά αυτή.


Programs/UI:
	main.c : αποτελεί τον κορμό του προγράμματος και διαχειρίζεται τα arguments που πιθανώς να δώσει ο χρήστης.
	User.c : διαθέτει την υλοποίηση της συνάρτησης add_users_files_data(), και άλλων βοηθητικών της, η οποία είναι υπεύθυνη για το διάβασμα των αρχείων του χρήστη 
	και για την σωστή διαχείρισή τους.
	Prompt.c : περιέχει την συνάρτηση prompt() η οποία είναι υπεύθυνη για το command prompt που ζητείται να υλοποιήσουμε με τις συγκεκριμένες εντολές.
	Operations.c : περιέχει τις υλοποιήσεις των λειτουργιών της γραμμής εντολών που υλοποιήσαμε.
	Structures.c : διαθέτει τους ορισμούς των global μεταβλητών που χρησιμοποιούνται σε όλο το πρόγραμμα.

Input file:
	Διαθέτει γραμμές με εγγραφές φοιτητών με το συγκεκριμένο format. Στον φάκελο υπάρχει το αρχείο input.txt που περιέχει ορισμένες εγγραφές.

Configuration file:
	Ο χρήστης μπορεί να ρυθμίσει δύο μεγέθη μέσα από το συγκεκριμένο αρχείο:
	HASH_TABLE_SIZE : το σταθερό μέγεθος του πίνακα κατακερματισμού που περιέχει όλους τους φοιτητές.	
	STRING_SIZE : το μέγεθος συμβολοσειρών στο πρόγραμμα, πχ. αν ο χρήστης επιθυμεί περισσότερους χαρακτήρες από τους default, μπορεί να αλλάξει αυτήν την ρύθμιση.(default: 255)
	Το format του configuration file είναι το εξής: 
	HASH_TABLE_SIZE = 100
	STRING_SIZE = 512
	
	Δίνεται το αρχείο config.txt σαν template.


Σε περίπτωση που δεν δοθεί ούτε configuration ούτε input file, το μέγεθος του Hash table ορίζεται από το default hash table size που είναι 50. (Structures.h) Δεν εγγυώμαστε
για την αξιοπιστία της εφαρμογής για πάνω από 50 εγγραφές στην συγκεκριμένη περίπτωση.
Αν δοθεί input file και όχι configuration file, τότε το μέγεθος του hash table θα είναι ίσο με τον αριθμό των φοιτητών του input file.






